diff --git a/mount.cifs.8 b/mount.cifs.8
index d8ad9f0..daff4fe 100644
--- a/mount.cifs.8
+++ b/mount.cifs.8
@@ -140,11 +140,16 @@ port=\fIarg\fR
 sets the port number on which the client will attempt to contact the CIFS server\&. If this value is specified, look for an existing connection with this port, and use that if one exists\&. If one doesn't exist, try to create a new connection on that port\&. If that connection fails, return an error\&. If this value isn't specified, look for an existing connection on port 445 or 139\&. If no such connection exists, try to connect on port 445 first and then port 139 if that fails\&. Return an error if both fail\&.
 .RE
 .PP
-servern=\fIarg\fR
+servernetbiosname=\fIarg\fR
 .RS 4
 Specify the server netbios name (RFC1001 name) to use when attempting to setup a session to the server\&. Although rarely needed for mounting to newer servers, this option is needed for mounting to some older servers (such as OS/2 or Windows 98 and Windows ME) since when connecting over port 139 they, unlike most newer servers, do not support a default server name\&. A server name can be up to 15 characters long and is usually uppercased\&.
 .RE
 .PP
+servern=\fIarg\fR
+.RS 4
+Synonym for \fIservernetbiosname\fR.
+.RE
+.PP
 netbiosname=\fIarg\fR
 .RS 4
 When mounting to servers via port 139, specifies the RFC1001 source name to use to represent the client netbios machine name when doing the RFC1001 netbios session initialize\&.
@@ -254,7 +259,17 @@ noacl
 .RS 4
 Do not allow POSIX ACL operations even if server would support them\&.
 .sp
-The CIFS client can get and set POSIX ACLs (getfacl, setfacl) to Samba servers version 3\&.0\&.10 and later\&. Setting POSIX ACLs requires enabling both XATTR and then POSIX support in the CIFS configuration options when building the cifs module\&. POSIX ACL support can be disabled on a per mount basis by specifying "noacl" on mount\&.
+The CIFS client can get and set POSIX ACLs (getfacl, setfacl) to Samba servers version 3\&.0\&.10 and later\&. Setting POSIX ACLs requires enabling both CIFS_XATTR and then CIFS_POSIX support in the CIFS configuration options when building the cifs module\&. POSIX ACL support can be disabled on a per mount basis by specifying "noacl" on mount\&.
+.RE
+.PP
+cifsacl
+.RS 4
+This option is used to map CIFS/NTFS ACLs to/from Linux permission bits,
+map SIDs to/from UIDs and GIDs, and get and set Security Descriptors\&.
+.sp
+See sections on
+\fICIFS/NTFS ACL, SID/UID/GID MAPPING, SECURITY DESCRIPTORS\fR
+for more information\&.
 .RE
 .PP
 nocase
@@ -262,6 +277,11 @@ nocase
 Request case insensitive path name matching (case sensitive is the default if the server suports it)\&.
 .RE
 .PP
+ignorecase
+.RS 4
+Synonym for \fInocase\fR.
+.RE
+.PP
 sec=
 .RS 4
 Security mode\&. Allowed values are:
@@ -358,12 +378,12 @@ When the CIFS Unix Extensions are not negotiated, attempt to create device files
 .PP
 serverino
 .RS 4
-Use inode numbers (unique persistent file identifiers) returned by the server instead of automatically generating temporary inode numbers on the client\&. Although server inode numbers make it easier to spot hardlinked files (as they will have the same inode numbers) and inode numbers may be persistent (which is userful for some sofware), the server does not guarantee that the inode numbers are unique if multiple server side mounts are exported under a single share (since inode numbers on the servers might not be unique if multiple filesystems are mounted under the same shared higher level directory)\&. Note that not all servers support returning server inode numbers, although those that support the CIFS Unix Extensions, and Windows 2000 and later servers typically do support this (although not necessarily on every local server filesystem)\&. Parameter has no effect if the server lacks support for returning inode numbers or equivalent\&.
+Use inode numbers (unique persistent file identifiers) returned by the server instead of automatically generating temporary inode numbers on the client\&. Although server inode numbers make it easier to spot hardlinked files (as they will have the same inode numbers) and inode numbers may be persistent (which is userful for some sofware), the server does not guarantee that the inode numbers are unique if multiple server side mounts are exported under a single share (since inode numbers on the servers might not be unique if multiple filesystems are mounted under the same shared higher level directory)\&. Note that not all servers support returning server inode numbers, although those that support the CIFS Unix Extensions, and Windows 2000 and later servers typically do support this (although not necessarily on every local server filesystem)\&. Parameter has no effect if the server lacks support for returning inode numbers or equivalent\&. This behavior is enabled by default\&.
 .RE
 .PP
 noserverino
 .RS 4
-Client generates inode numbers (rather than using the actual one from the server) by default\&.
+Client generates inode numbers itself rather than using the actual ones from the server\&.
 .sp
 See section
 \fIINODE NUMBERS\fR
@@ -389,9 +409,9 @@ rsize=\fIarg\fR
 default network read size (usually 16K)\&. The client currently can not use rsize larger than CIFSMaxBufSize\&. CIFSMaxBufSize defaults to 16K and may be changed (from 8K to the maximum kmalloc size allowed by your kernel) at module install time for cifs\&.ko\&. Setting CIFSMaxBufSize to a very large value will cause cifs to use more memory and may reduce performance in some cases\&. To use rsize greater than 127K (the original cifs protocol maximum) also requires that the server support a new Unix Capability flag (for very large read) which some newer servers (e\&.g\&. Samba 3\&.0\&.26 or later) do\&. rsize can be set from a minimum of 2048 to a maximum of 130048 (127K or CIFSMaxBufSize, whichever is smaller)
 .RE
 .PP
-wsize=\fIarg\fR
+wsize=\fIbytes\fR
 .RS 4
-default network write size (default 57344) maximum wsize currently allowed by CIFS is 57344 (fourteen 4096 byte pages)
+Maximum amount of data that the kernel will send in a write request in bytes\&. Prior to RHEL6\&.2 kernels, the default and maximum was 57344 (14 * 4096 pages)\&. As of RHEL6\&.2, the default is 1M, and the maximum allowed is 16M\&. Note that this value is just a starting point for negotiation. The client and server may negotiate this size downward according to the server's capabilities\&.
 .RE
 .PP
 fsc
@@ -426,6 +446,20 @@ positive integer that can hold values between 0 and a maximum value of
 2^30 * HZ (frequency of timer interrupt) setting\&.
 .RE
 .PP
+noposixpaths
+.RS 4
+If unix extensions are enabled on a share, then the client will typically allow
+filenames to include any character besides '/' in a pathname component, and
+will use forward slashes as a pathname delimiter. This option prevents the
+client from attempting to negotiate the use of posix-style pathnames to the
+server.
+.RE
+.PP
+posixpaths
+.RS 4
+Inverse of \fInoposixpaths\fR.
+.RE
+.PP
 \-\-verbose
 .RS 4
 Print additional debugging information for the mount\&. Note that this parameter must be specified before the \-o\&. For example:
@@ -444,6 +478,61 @@ When Unix Extensions are enabled, we use the actual inode number provided by the
 When Unix Extensions are disabled and "serverino" mount option is enabled there is no way to get the server inode number\&. The client typically maps the server\-assigned "UniqueID" onto an inode number\&.
 .PP
 Note that the UniqueID is a different value from the server inode number\&. The UniqueID value is unique over the scope of the entire server and is often greater than 2 power 32\&. This value often makes programs that are not compiled with LFS (Large File Support), to trigger a glibc EOVERFLOW error as this won\'t fit in the target structure field\&. It is strongly recommended to compile your programs with LFS support (i\&.e\&. with \-D_FILE_OFFSET_BITS=64) to prevent this problem\&. You can also use "noserverino" mount option to generate inode numbers smaller than 2 power 32 on the client\&. But you may not be able to detect hardlinks properly\&.
+.SH CIFS/NTFS ACL, SID/UID/GID MAPPING, SECURITY DESCRIPTORS
+This option is used to work with file objects which posses Security Descriptors and CIFS/NTFS ACL instead of UID, GID, file permission bits, and POSIX ACL as user authentication model. This is the most common authentication model for CIFS servers and is the one used by Windows.
+.sp
+Support for this requires both CIFS_XATTR and CIFS_ACL support in the CIFS configuration options when building the cifs module.
+
+A CIFS/NTFS ACL is mapped to file permission bits using an algorithm specified in the following Microsoft TechNet document:
+.sp
+.RS 4
+.ie n \{\
+\h'-04'\(bu\h'+03'\c
+.\}
+.el \{\
+.sp -1
+.IP \(bu 2.3
+.\}
+http://technet.microsoft.com/en-us/library/bb463216.aspx
+.RE
+
+Security descriptors for a file object can be retrieved and set directly using extended attribute named system.cifs_acl. The security descriptors presented via this interface are "raw" blobs of data and need a userspace utility to either parse and format or to assemble it.
+.sp
+Some of the things to consider while using this mount option:
+.sp
+.RS 4
+.ie n \{\
+\h'-04'\(bu\h'+03'\c
+.\}
+.el \{\
+.sp -1
+.IP \(bu 2.3
+.\}
+There may be an increased latency when handling metadata due to additional requests to get and set security descriptors.
+.RE
+.sp
+.RS 4
+.ie n \{\
+\h'-04'\(bu\h'+03'\c
+.\}
+.el \{\
+.sp -1
+.IP \(bu 2.3
+.\}
+The mapping between a CIFS/NTFS ACL and POSIX file permission bits is imperfect and some ACL information may be lost in the translation.
+.RE
+.sp
+.RS 4
+.ie n \{\
+\h'-04'\(bu\h'+03'\c
+.\}
+.el \{\
+.sp -1
+.IP \(bu 2.3
+.\}
+While RHEL6 supports the mapping of permission bits to windows ACLs, it does
+not map the owner SIDs to UID/GID or vice versa.
+.RE
 .SH "FILE AND DIRECTORY OWNERSHIP AND PERMISSIONS"
 .PP
 The core CIFS protocol does not provide unix ownership information or mode for files and directories\&. Because of this, files and directories will generally appear to be owned by whatever values the uid= or gid= options are set, and will have permissions set to the default file_mode and dir_mode for the mount\&. Attempting to change these values via chmod/chown will return success but have no effect\&.
@@ -490,7 +579,7 @@ The credentials file does not handle usernames or passwords with leading space\&
 Note that the typical response to a bug report is a suggestion to try the latest version first\&. So please try doing that first, and always include which versions you use of relevant software when reporting bugs (minimum: mount\&.cifs (try mount\&.cifs \-V), kernel (see /proc/version) and server type you are trying to contact\&.
 .SH "VERSION"
 .PP
-This man page is correct for version 1\&.52 of the cifs vfs filesystem (roughly Linux kernel 2\&.6\&.24)\&.
+This man page is correct for version 1\&.74 of the cifs vfs filesystem (roughly Linux kernel 3\&.0)\&.
 .SH "SEE ALSO"
 .PP
 Documentation/filesystems/cifs\&.txt and fs/cifs/README in the linux kernel source tree may contain additional options and information\&.
